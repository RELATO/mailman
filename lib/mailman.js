// Generated by CoffeeScript 1.6.2
var Mailer, Mailman, Templato, exec, extractExtension, fs, glob, _;

Mailer = require('nodemailer');

Templato = require('templato');

fs = require('fs');

exec = require('child_process').exec;

glob = require('glob');

_ = require('lodash');

extractExtension = function(s) {
  var parts;

  parts = s.replace(/^.*[\/\\]/g, '').split('.');
  return parts.slice(1, +(parts.length - 1) + 1 || 9e9).join('.');
};

Mailman = (function() {
  function Mailman() {}

  Mailman.viewsDir = '';

  Mailman.connect = function(params) {
    var transport;

    transport = params.service.toLowerCase() === 'ses' ? 'SES' : 'SMTP';
    params.auth = {
      user: params.user,
      pass: params.password
    };
    params.secureConnection = !!params.ssl;
    return this.transport = Mailer.createTransport(transport, params);
  };

  return Mailman;

})();

Mailman.Model = (function() {
  function Model() {
    this.attachments = [];
    this.generateTextFromHTML = true;
    this.transport = Mailman.transport;
    this.params = {};
    this.templateVariables = {};
  }

  Model.prototype.sendMail = function(callback) {
    this.params.html = this.template.render(_.extend({
      params: this.params
    }, this.templateVariables));
    return this.transport.sendMail(this.params, callback);
  };

  Model.prototype.loadTemplate = function(path, done) {
    var _this = this;

    return fs.readFile(path, 'utf-8', function(err, source) {
      _this.template = new Templato;
      _this.template.set({
        engine: extractExtension(path),
        template: source
      });
      if (done) {
        return done();
      }
    });
  };

  Model.prototype.deliver = function(callback) {
    var keys,
      _this = this;

    keys = ['from', 'to', 'cc', 'bcc', 'replyTo', 'subject', 'text', 'html', 'headers', 'attachments', 'encoding', 'generateTextFromHTML'];
    _.forIn(this, function(value, key) {
      if (!('function' === typeof value)) {
        if (_.contains(keys, key)) {
          return _this.params[key] = value;
        } else {
          return _this.templateVariables[key] = value;
        }
      }
    });
    if (!(this.text || this.html)) {
      if (extractExtension(this.view)) {
        return this.loadTemplate("" + Mailman.viewsDir + "/" + this.view, function() {
          return _this.sendMail(callback);
        });
      } else {
        return glob("" + Mailman.viewsDir + "/" + this.view + ".*", {}, function(err, files) {
          return _this.loadTemplate(files[0], function() {
            return _this.sendMail(callback);
          });
        });
      }
    } else {
      return this.sendMail(callback);
    }
  };

  Model.prototype.send = function() {
    return this.deliver.apply(this, arguments);
  };

  Model.extend = function(options) {
    var __hasProp = {}.hasOwnProperty,
		  	 __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
    var model;

    return model = (function(_super){
			__extends(model, _super);
			
			function model() { return model.__super__.constructor.apply(this, arguments); }
			
			_.forOwn(options, function(value, key){
				model.prototype[key] = value;
			});
			
			return model;
		})(Mailman.Model);
  };

  return Model;

})();

module.exports = Mailman;
