// Generated by CoffeeScript 1.3.3
var Mailer, Mailman, Templato, exec, extractExtension, fs;

Mailer = require('nodemailer');

Templato = require('templato');

fs = require('fs');

exec = require('child_process').exec;

extractExtension = function(s) {
  var parts;
  parts = s.replace(/^.*[\/\\]/g, '').split('.');
  return parts.slice(1, (parts.length - 1) + 1 || 9e9).join('.');
};

Mailman = (function() {

  function Mailman() {}

  Mailman.viewsPath = '';

  Mailman.connect = function(params) {
    var transport;
    transport = params.service.toLowerCase() === 'ses' ? 'SES' : 'SMTP';
    params.auth = {
      user: params.user,
      pass: params.password
    };
    params.secureConnection = !!params.ssl;
    return this.transport = Mailer.createTransport(transport, params);
  };

  Mailman.setup = function(model) {
    model.prototype.transport = this.transport;
    model.prototype.className = model.name;
    return model;
  };

  return Mailman;

})();

Mailman.Model = (function() {

  function Model() {
    this.attachments = [];
    this.generateTextFromHTML = true;
  }

  Model.prototype.deliver = function(callback) {
    var key, keys, next, params, variables,
      _this = this;
    keys = ['from', 'to', 'cc', 'bcc', 'replyTo', 'subject', 'text', 'html', 'headers', 'attachments', 'encoding', 'className', 'template'];
    params = {};
    variables = {};
    for (key in this) {
      if ('string' === typeof this[key]) {
        if (-1 === keys.indexOf(key)) {
          variables[key] = this[key];
        } else {
          params[key] = this[key];
        }
      }
    }
    next = function() {
      params.html = _this.template.render(variables);
      return _this.transport.sendMail(params, callback);
    };
    if (!(this.text || this.html)) {
      if (!this.template) {
        return exec("find " + Mailman.viewsPath + " -iname '" + (this.view || this.className.toLowerCase()) + "*' -exec echo {} \\;", function(err, stdout) {
          stdout = stdout.trim();
          return fs.readFile(stdout, 'utf-8', function(err, source) {
            _this.template = new Templato;
            _this.template.set({
              engine: extractExtension(stdout),
              template: source
            });
            return next();
          });
        });
      } else {
        return next();
      }
    }
  };

  Model.prototype.send = function() {
    return this.deliver.apply(this, arguments);
  };

  return Model;

})();

module.exports = Mailman;
